git init
将当前所在目录变成git可管理目录仓库

git add <file>  "可一次添加多个文件"
将文件添加道git缓存仓库(未正式放入git仓库)

git commit
将缓存仓库的文件放入git仓库

git status
返回当前目录(仓库)文件的状态(是否修改等等)

git diff
放回当前目录(仓库)文件与git仓库文件的具体的不同点

git log --pretty=oneline  "提交命令"
显示提交到git仓库的日志,后面参数可以让日志以一行输出

git reset --hard HEAD^ "^表示上个版本,^^表示上上个版本,可用~(数字)来简写,如~10"
将目录仓库中的文件回退到git仓库中文件的某个版本(回到过去)

git reset --hard id "id是git log命令下commit后的版本号,可只写几位让git自动查找"
目录仓库文件回退至过去版本时此命令恢复到现在(指定id的)版本(回到未来)

HEAD
一个指向版本的指针

git reflog               "历史命令"
记录你的每一次命令,可在此处看到文件的id,方便误操作时找回文件

git原理:
	.git隐藏文件是git创建的版本库
	工作区:可见的目录
	暂存区(stage):add命令添加的文件都是放在暂存区
	控制区(master):最终文件的存放处,还有唯一的分支master和它的指针HEAD

git checkout -- file   "--很重要,没有就变成另外一个命令"
撤销工作区文件的修改(git仓库文件替换git目录下文件)

git reset HEAD file
撤销暂存区文件的修改. (再次撤销工作区文件修改可以应对文件乱改的情况)

git rm  "rm file --> git status --> git rm --> git commit"
删除git仓库中的文件,然后需要git commit应用到仓库,若恢复会丢失最近一次提交的修改

git连接远程服务器(github):
	ssh-keygen -t rsa -C "email@email.com" 命令生成SSH Key密钥
	将id_rsa.pub的公钥复制到github下的SSH Keys中
	id_rsa下是私钥,不能泄漏

同步文件到github:
	git remote add origin git@server-name:path/repo-name.git 关联到github
	git push -u origin master 第一次推送master分支(git仓库)的所有内容
	git push origin master 推送最新修改

从github同步文件到本地:
	git clone git@server-name:path/repo-name.git 复制github仓库下所有文件
	传输协议有git://和https://等其他,但git://速度最快,若环境不支持可换其他

git分支使用:
	git branch 查看分支,*为当前所在分支
	git branch <name> 创建分支
	git checkout <name> 切换分支
	git checkout -b <name> 创建+切换分支
	git merge <name> 合并<name>分支道当前所在分支
	git branch -d <name> 删除分支
	使用创建分支工作再合并相比在master分支上修改要更安全,但效果一样

分支冲突时需要手动修改冲突的地方,然后才能提交到git仓库
git status下<<<<<<<,=======,>>>>>>>标记不同分支的内容(分支冲突时查看)
git log --graph 可查看分支合并图

分支管理策略:
	Fast Forward合并分支,删除合并的分支后会丢掉分支信息
	git merge后跟--no-ff参数表示强制禁用Fast Forward, 再跟-m ""添加分支信息
	例:git merge --no-ff -m "合并分支的信息" dev(具体要合并的分支名称)
	git log --graph可查看分支合并的信息
	实际开发时分支管理:
	    master主分支应该是稳定的,仅用来发布新版本,平时不能在上面工作
	    dev次分支是工作的地方,次分支内容稳定后再合并到主分支
	    person个人分支是每个工作者独立的分支,共同提交内容到次分支上
				        master   (稳定分支)
					  |      
					 dev     (活跃分支)
					/ | \		
				        1 2 3    (个人分支) 

bug分支:
	假如dev上有未完成的修改,但不能提交,而master上有bug需要修复,则
	在dev分支上git stash可以隐藏dev上未提交的内容
	然后在master创建issue-101分支,用来修复bug
	bug提交到master上,此时dev如果不隐藏,会把未完成的修改也提交		
	git stash list可以查看stash内容
	git stash apply恢复隐藏的内容,stash内容不删除,可查看
	若要删除stash内容要用git stash drop
	git stash pop恢复隐藏内容同时删除stash内容
	git stash apply stash@{0} 恢复指定stash,{}内索引		

























